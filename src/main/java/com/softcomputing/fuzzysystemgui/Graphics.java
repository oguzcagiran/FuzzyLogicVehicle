/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.softcomputing.fuzzysystemgui;

import com.softcomputing.fuzzysystem.Defuzzificator;
import com.softcomputing.fuzzysystem.DistanceMembership;
import com.softcomputing.fuzzysystem.SpeedMembership;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author oguz
 */
public class Graphics extends javax.swing.JFrame {

    private int speedInput;
    private int distanceInput;
    private String[][] rules;

    private boolean firstImpFlag = false;
    private boolean secondImpFlag = false;
    private boolean thirdImpFlag = false;
    private boolean fourthImpFlag = false;
    
    private Map<String, Double> aggregationMap = new HashMap<>();
    
    /**
     * Creates new form Graphics
     */
    public Graphics() {
        initComponents();
        
        defuzzificationGraph.setEnabled(false);
        AggregationGraphButton.setEnabled(false);
    }

    public int getSpeedInput() {
        return speedInput;
    }

    public void setSpeedInput(int speedInput) {
        this.speedInput = speedInput;
    }

    public int getDistanceInput() {
        return distanceInput;
    }

    public void setDistanceInput(int distanceInput) {
        this.distanceInput = distanceInput;
    }

    public String[][] getRules() {
        return rules;
    }

    public void setRules(String[][] rules) {
        this.rules = rules;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        firstSpeedInputGraph = new javax.swing.JButton();
        firstDistanceInputGraph = new javax.swing.JButton();
        firstRuleImplicationGraph = new javax.swing.JButton();
        firstSpeedChangeGraph = new javax.swing.JButton();
        secondSpeedInputGraph = new javax.swing.JButton();
        secondDistanceInputGraph = new javax.swing.JButton();
        secondRuleImplicationGraph = new javax.swing.JButton();
        secondSpeedChangeGraph = new javax.swing.JButton();
        thirdRuleImplicationGraph = new javax.swing.JButton();
        thirdSpeedChangeGraph = new javax.swing.JButton();
        ThirdDistanceInputGraph = new javax.swing.JButton();
        thirdSpeedInputGraph = new javax.swing.JButton();
        fourthSpeedInputGraph = new javax.swing.JButton();
        fourthDistanceInputGraph = new javax.swing.JButton();
        fourthSpeedChangeGraph = new javax.swing.JButton();
        FourthRuleImplicationGraph = new javax.swing.JButton();
        defuzzificationGraph = new javax.swing.JButton();
        AggregationGraphButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        firstSpeedInputGraph.setText("Speed Input 1");
        firstSpeedInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSpeedInputGraphActionPerformed(evt);
            }
        });

        firstDistanceInputGraph.setText("Distance Input 1");
        firstDistanceInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstDistanceInputGraphActionPerformed(evt);
            }
        });

        firstRuleImplicationGraph.setText("Implication 1");
        firstRuleImplicationGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstRuleImplicationGraphActionPerformed(evt);
            }
        });

        firstSpeedChangeGraph.setText("Speed Change Output 1");
        firstSpeedChangeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSpeedChangeGraphActionPerformed(evt);
            }
        });

        secondSpeedInputGraph.setText("Speed Input 2");
        secondSpeedInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSpeedInputGraphActionPerformed(evt);
            }
        });

        secondDistanceInputGraph.setText("Distance Input 2");
        secondDistanceInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondDistanceInputGraphActionPerformed(evt);
            }
        });

        secondRuleImplicationGraph.setText("Implication 2");
        secondRuleImplicationGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondRuleImplicationGraphActionPerformed(evt);
            }
        });

        secondSpeedChangeGraph.setText("Speed Change Output 2");
        secondSpeedChangeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSpeedChangeGraphActionPerformed(evt);
            }
        });

        thirdRuleImplicationGraph.setText("Implication 3");
        thirdRuleImplicationGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirdRuleImplicationGraphActionPerformed(evt);
            }
        });

        thirdSpeedChangeGraph.setText("Speed Change Output 3");
        thirdSpeedChangeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirdSpeedChangeGraphActionPerformed(evt);
            }
        });

        ThirdDistanceInputGraph.setText("Distance Input 3");
        ThirdDistanceInputGraph.setToolTipText("");
        ThirdDistanceInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThirdDistanceInputGraphActionPerformed(evt);
            }
        });

        thirdSpeedInputGraph.setText("Speed Input 3");
        thirdSpeedInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirdSpeedInputGraphActionPerformed(evt);
            }
        });

        fourthSpeedInputGraph.setText("Speed Input 4");
        fourthSpeedInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourthSpeedInputGraphActionPerformed(evt);
            }
        });

        fourthDistanceInputGraph.setText("Distance Input 4");
        fourthDistanceInputGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourthDistanceInputGraphActionPerformed(evt);
            }
        });

        fourthSpeedChangeGraph.setText("Speed Change Output 4");
        fourthSpeedChangeGraph.setToolTipText("");
        fourthSpeedChangeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourthSpeedChangeGraphActionPerformed(evt);
            }
        });

        FourthRuleImplicationGraph.setText("Implication 4");
        FourthRuleImplicationGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourthRuleImplicationGraphActionPerformed(evt);
            }
        });

        defuzzificationGraph.setText("Defuzzification");
        defuzzificationGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defuzzificationGraphActionPerformed(evt);
            }
        });

        AggregationGraphButton.setText("Aggregation");
        AggregationGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AggregationGraphButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstRuleImplicationGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(firstSpeedChangeGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(firstDistanceInputGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(firstSpeedInputGraph, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defuzzificationGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(AggregationGraphButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(secondRuleImplicationGraph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(secondSpeedChangeGraph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(secondDistanceInputGraph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(secondSpeedInputGraph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(thirdSpeedChangeGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ThirdDistanceInputGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(thirdSpeedInputGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(thirdRuleImplicationGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fourthSpeedChangeGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fourthDistanceInputGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fourthSpeedInputGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FourthRuleImplicationGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstSpeedInputGraph)
                    .addComponent(secondSpeedInputGraph)
                    .addComponent(thirdSpeedInputGraph)
                    .addComponent(fourthSpeedInputGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstDistanceInputGraph)
                    .addComponent(secondDistanceInputGraph)
                    .addComponent(ThirdDistanceInputGraph)
                    .addComponent(fourthDistanceInputGraph))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstSpeedChangeGraph)
                    .addComponent(secondSpeedChangeGraph)
                    .addComponent(thirdSpeedChangeGraph)
                    .addComponent(fourthSpeedChangeGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstRuleImplicationGraph)
                    .addComponent(secondRuleImplicationGraph)
                    .addComponent(thirdRuleImplicationGraph)
                    .addComponent(FourthRuleImplicationGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AggregationGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(defuzzificationGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstSpeedInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSpeedInputGraphActionPerformed
        String firstSpeedRule = getRules()[0][0];
        SpeedInputMembershipGraph graph = new SpeedInputMembershipGraph(firstSpeedRule);
        graph.showGraph();
    }//GEN-LAST:event_firstSpeedInputGraphActionPerformed

    private void secondSpeedInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondSpeedInputGraphActionPerformed
        String secondSpeedRule = getRules()[1][0];
        SpeedInputMembershipGraph graph = new SpeedInputMembershipGraph(secondSpeedRule);
        graph.showGraph();
    }//GEN-LAST:event_secondSpeedInputGraphActionPerformed

    private void thirdSpeedInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirdSpeedInputGraphActionPerformed
        String thirdSpeedRule = getRules()[2][0];
        SpeedInputMembershipGraph graph = new SpeedInputMembershipGraph(thirdSpeedRule);
        graph.showGraph();
    }//GEN-LAST:event_thirdSpeedInputGraphActionPerformed

    private void fourthSpeedInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourthSpeedInputGraphActionPerformed
        String forthSpeedRule = getRules()[3][0];
        SpeedInputMembershipGraph graph = new SpeedInputMembershipGraph(forthSpeedRule);
        graph.showGraph();
    }//GEN-LAST:event_fourthSpeedInputGraphActionPerformed

    private void firstDistanceInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstDistanceInputGraphActionPerformed
        String firstDistanceRule = getRules()[0][1];
        DistanceInputMembershipGraph graph = new DistanceInputMembershipGraph(firstDistanceRule);
        graph.showGraph();
    }//GEN-LAST:event_firstDistanceInputGraphActionPerformed

    private void secondDistanceInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondDistanceInputGraphActionPerformed
        String secondDistanceRule = getRules()[1][1];
        DistanceInputMembershipGraph graph = new DistanceInputMembershipGraph(secondDistanceRule);
        graph.showGraph();
    }//GEN-LAST:event_secondDistanceInputGraphActionPerformed

    private void ThirdDistanceInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThirdDistanceInputGraphActionPerformed
        String thirdDistanceRule = getRules()[2][1];
        DistanceInputMembershipGraph graph = new DistanceInputMembershipGraph(thirdDistanceRule);
        graph.showGraph();
    }//GEN-LAST:event_ThirdDistanceInputGraphActionPerformed

    private void fourthDistanceInputGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourthDistanceInputGraphActionPerformed
        String fourthDistanceRule = getRules()[3][1];
        DistanceInputMembershipGraph graph = new DistanceInputMembershipGraph(fourthDistanceRule);
        graph.showGraph();
    }//GEN-LAST:event_fourthDistanceInputGraphActionPerformed

    private void firstSpeedChangeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSpeedChangeGraphActionPerformed
        String firstSpeedChangeRule = getRules()[0][2];
        MotorSpeedChangeInputMembershipGraph graph = new MotorSpeedChangeInputMembershipGraph(firstSpeedChangeRule);
        graph.showGraph();
    }//GEN-LAST:event_firstSpeedChangeGraphActionPerformed

    private void secondSpeedChangeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondSpeedChangeGraphActionPerformed
        String secondSpeedChangeRule = getRules()[1][2];
        MotorSpeedChangeInputMembershipGraph graph = new MotorSpeedChangeInputMembershipGraph(secondSpeedChangeRule);
        graph.showGraph();
    }//GEN-LAST:event_secondSpeedChangeGraphActionPerformed

    private void thirdSpeedChangeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirdSpeedChangeGraphActionPerformed
        String thirdSpeedChangeRule = getRules()[2][2];
        MotorSpeedChangeInputMembershipGraph graph = new MotorSpeedChangeInputMembershipGraph(thirdSpeedChangeRule);
        graph.showGraph();
    }//GEN-LAST:event_thirdSpeedChangeGraphActionPerformed

    private void fourthSpeedChangeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourthSpeedChangeGraphActionPerformed
        String fourthSpeedChangeRule = getRules()[3][2];
        MotorSpeedChangeInputMembershipGraph graph = new MotorSpeedChangeInputMembershipGraph(fourthSpeedChangeRule);
        graph.showGraph();
    }//GEN-LAST:event_fourthSpeedChangeGraphActionPerformed

    private void firstRuleImplicationGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstRuleImplicationGraphActionPerformed

        String firstSpeedChange = getRules()[0][2];
        String firstSpeedRule = getRules()[0][0];
        String firstDistanceRule = getRules()[0][1];

        double speedMembershipValue = getSpeedMembershipValue(firstSpeedRule, speedInput);
        double distanceMembershipValue = getDistanceMembershipValue(firstDistanceRule, distanceInput);
        double res = Math.min(speedMembershipValue, distanceMembershipValue);
        
        aggregationMap.put(firstSpeedChange, res);
        
        showImplicationGraph(firstSpeedChange, res);
        
        firstImpFlag = true;
        
        enableButtonsIfFourImplicationButtonClicked();
    }//GEN-LAST:event_firstRuleImplicationGraphActionPerformed

    private void secondRuleImplicationGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondRuleImplicationGraphActionPerformed

        String secondSpeedChange = getRules()[1][2];
        String secondSpeedRule = getRules()[1][0];
        String secondDistanceRule = getRules()[1][1];

        double speedMembershipValue = getSpeedMembershipValue(secondSpeedRule, speedInput);
        double distanceMembershipValue = getDistanceMembershipValue(secondDistanceRule, distanceInput);
        double res = Math.min(speedMembershipValue, distanceMembershipValue);

        aggregationMap.put(secondSpeedChange, res);
        
        showImplicationGraph(secondSpeedChange, res);
        
        secondImpFlag = true;
        
        enableButtonsIfFourImplicationButtonClicked();
    }//GEN-LAST:event_secondRuleImplicationGraphActionPerformed

    private void thirdRuleImplicationGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirdRuleImplicationGraphActionPerformed
        String thirdSpeedChange = getRules()[2][2];
        String thirdSpeedRule = getRules()[2][0];
        String thirdDistanceRule = getRules()[2][1];

        double speedMembershipValue = getSpeedMembershipValue(thirdSpeedRule, speedInput);
        double distanceMembershipValue = getDistanceMembershipValue(thirdDistanceRule, distanceInput);
        double res = Math.min(speedMembershipValue, distanceMembershipValue);

        aggregationMap.put(thirdSpeedChange, res);
        
        showImplicationGraph(thirdSpeedChange, res);
        
        thirdImpFlag = true;
        
        enableButtonsIfFourImplicationButtonClicked();
    }//GEN-LAST:event_thirdRuleImplicationGraphActionPerformed

    private void FourthRuleImplicationGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourthRuleImplicationGraphActionPerformed
        String fourthSpeedChange = getRules()[3][2];
        String fourthSpeedRule = getRules()[3][0];
        String fourthDistanceRule = getRules()[3][1];

        double speedMembershipValue = getSpeedMembershipValue(fourthSpeedRule, speedInput);
        double distanceMembershipValue = getDistanceMembershipValue(fourthDistanceRule, distanceInput);
        double res = Math.min(speedMembershipValue, distanceMembershipValue);

        aggregationMap.put(fourthSpeedChange, res);
        
        showImplicationGraph(fourthSpeedChange, res);
        
        fourthImpFlag = true;
        
        enableButtonsIfFourImplicationButtonClicked();
    }//GEN-LAST:event_FourthRuleImplicationGraphActionPerformed

    private void AggregationGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AggregationGraphButtonActionPerformed
        AggregationMembershipGraph graph = new AggregationMembershipGraph(aggregationMap);
        graph.showGraph();
    }//GEN-LAST:event_AggregationGraphButtonActionPerformed

    private void defuzzificationGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defuzzificationGraphActionPerformed
        Defuzzificator defuzzificator = new Defuzzificator();
        double res = defuzzificator.defuzzify(rules, speedInput, distanceInput);
        JOptionPane.showMessageDialog(null, res);
        AggregationMembershipGraph graph = new AggregationMembershipGraph(aggregationMap);
        graph.showGraph();
    }//GEN-LAST:event_defuzzificationGraphActionPerformed

    private double getDistanceMembershipValue(String distanceRule, int distance) {

        double res;
        DistanceMembership membership = new DistanceMembership();

        if (distanceRule.equals("Very Close")) {
            res = membership.getVeryCloseMembership(distance);
        } else if (distanceRule.equals("Close")) {
            res = membership.getCloseMembership(distance);
        } else if (distanceRule.equals("Normal")) {
            res = membership.getNormalMembership(distance);
        } else {
            res = membership.getAwayMembership(distance);
        }

        return res;

    }

    private double getSpeedMembershipValue(String speedRule, int speed) {

        double res;
        SpeedMembership membership = new SpeedMembership();

        if (speedRule.equals("Very Slow")) {
            res = membership.getVerySlowMembership(speed);
        } else if (speedRule.equals("Slow")) {
            res = membership.getSlowMembership(speed);
        } else if (speedRule.equals("Medium")) {
            res = membership.getMediumMembership(speed);
        } else if (speedRule.equals("Fast")) {
            res = membership.getFastMembership(speed);
        } else {
            res = membership.getVeryFastMembership(speed);
        }

        return res;

    }
    
    private void showImplicationGraph(String speedChangeRule, double res) {
        if (speedChangeRule.equals("Stop")) {
            StopImplicationGraph graph = new StopImplicationGraph(res);
            graph.showGraph();
        } else if (speedChangeRule.equals("Slow Down")) {
            SlowDownImplicationGraph graph = new SlowDownImplicationGraph(res);
            graph.showGraph();
        } else if (speedChangeRule.equals("Keep Pace")) {
            KeepPaceImplicationGraph graph = new KeepPaceImplicationGraph(res);
            graph.showGraph();
        } else {
            SpeedUpImplicationGraph graph = new SpeedUpImplicationGraph(res);
            graph.showGraph();
        }
    }
    
    private void enableButtonsIfFourImplicationButtonClicked() {
        if(firstImpFlag && secondImpFlag && thirdImpFlag && fourthImpFlag){
            defuzzificationGraph.setEnabled(true);
            AggregationGraphButton.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Graphics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AggregationGraphButton;
    private javax.swing.JButton FourthRuleImplicationGraph;
    private javax.swing.JButton ThirdDistanceInputGraph;
    private javax.swing.JButton defuzzificationGraph;
    private javax.swing.JButton firstDistanceInputGraph;
    private javax.swing.JButton firstRuleImplicationGraph;
    private javax.swing.JButton firstSpeedChangeGraph;
    private javax.swing.JButton firstSpeedInputGraph;
    private javax.swing.JButton fourthDistanceInputGraph;
    private javax.swing.JButton fourthSpeedChangeGraph;
    private javax.swing.JButton fourthSpeedInputGraph;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton secondDistanceInputGraph;
    private javax.swing.JButton secondRuleImplicationGraph;
    private javax.swing.JButton secondSpeedChangeGraph;
    private javax.swing.JButton secondSpeedInputGraph;
    private javax.swing.JButton thirdRuleImplicationGraph;
    private javax.swing.JButton thirdSpeedChangeGraph;
    private javax.swing.JButton thirdSpeedInputGraph;
    // End of variables declaration//GEN-END:variables
}
